name: Log4j漏洞利用检测 (增强版)
pattern:
  # JNDI注入模式
  params: '\$\{jndi:(ldap|rmi|dns|corba|iiop)://[^\s]+\}'

  # 环境变量查找
  params: '\$\{(env|sys|lower|upper):\w+\}'

  # 类查找和实例化
  params: '\$\{(java|sun|com):\w+\}'

  # Spring Boot Log4j
  params: '\$\{(spring|application|logging):\w+\}'

  # 编码绕过尝试
  params: '\$\{\s*(jndi|env|sys)\s*:\s*[^\}]+\s*\}'
  decoded_params: '\${jndi:(ldap|rmi|dns)://'

  # User-Agent中的payload
  user_agent: '\$\{jndi:(ldap|rmi|dns)://[^\s]+\}'

  # 请求头中的payload
  request_headers: '(User-Agent|Referer|Accept|X-Forwarded-For|X-Real-IP|X-Originating-IP|X-Remote-IP|X-Remote-Addr):.*?\$\{jndi:'

  # JSON/XML中的payload
  request_body: '(".*?"|<[^>]*>).*?\$\{jndi:(ldap|rmi|dns)://'

  # Base64编码的JNDI payload
  params: '\$\{jndi:(ldap|rmi)://[^\}]+:(\$\{base64:[A-Za-z0-9+/=]+\})\}'

  # LDAP/RMI服务器模式
  params: '://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}:[0-9]+/'
  params: '://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}:[0-9]+/'

  # 常见C2服务器模式
  params: '\.(jndi|ldap|rmi)\.(tk|ml|ga|cf|gq|men|click)/'

  # 文件写入和下载payload
  params: '\$\{(jndi|file|ftp|http):.*?\.class|\.jar|\.jsp|\.js|\.exe\}'

  # 反序列化利用链
  params: '\$\{(com\.sun\.rowset|org\.apache\.commons\.collections|org\.springframework)\.'

  # 绕过过滤器的变体
  params: '\$\{.*?jndi.*?:(ldap|rmi|dns)://'
  params: '\$\{\s*jndi\s*:\s*(ldap|rmi|dns)\s*://'
  params: '\$\{jndi:\s*(ldap|rmi|dns)\s*://[^\s]+\s*\}'

  # 延迟和DNS请求检测
  params: '\$\{(jn|j|jv|jndi|jndw):\s*(ldap|rmi|dns)://'

  # 攻击工具特征
  user_agent: '(log4j-scan|log4j-exploit|log4shell|CVE-2021-44228|jndi-injection)'

  # 已知恶意IP模式
  src_ip: '(192\.168\.[0-9]+\.[0-9]+|10\.[0-9]+\.[0-9]+\.[0-9]+|172\.(1[6-9]|2[0-9]|3[0-1])\.[0-9]+\.[0-9]+)'

severity: critical
category: log4j_vulnerability
description: |
  Log4j漏洞(CVE-2021-44228)增强检测，覆盖多种攻击向量：
  - JNDI注入攻击(ldap/rmi/dns/corba)
  - 环境变量和系统属性查找
  - Java类查找和实例化
  - 编码和绕过技术
  - Base64编码payload
  - 反序列化利用链
  - 文件写入和恶意下载
  - 攻击工具和扫描器识别
  - 恶意IP和C2服务器检测

cwe: "CWE-502"
references:
  - "https://nvd.nist.gov/vuln/detail/CVE-2021-44228"
  - "https://logging.apache.org/log4j/2.x/security.html"
  - "https://www.lunasec.io/docs/blog/log4j-zero-day/"
attack_patterns:
  - "JNDI注入"
  - "远程代码执行"
  - "反序列化攻击"
  - "DNS外带"
  - "恶意文件下载"
response_codes: [200, 400, 404, 500, 503]
threat_level: "critical"
impact: "可能导致远程代码执行、系统完全妥协或数据泄露"